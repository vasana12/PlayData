package board;

import java.util.ArrayList;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


import javax.naming.Context;
import javax.naming.InitialContext;

import javax.sql.DataSource;

public class BoardDBBean {
   private static BoardDBBean instance = new BoardDBBean();

   public static BoardDBBean getInstance() {
      return instance;
   }

   private BoardDBBean() {
   }

   private Connection getConnection() throws Exception {
      Context initCtx = new InitialContext();
      Context envCtx = (Context) initCtx.lookup("java:comp/env");
      DataSource ds = (DataSource) envCtx.lookup("jdbc/OracleDB");
      return ds.getConnection();
   }
   
   private void close(ResultSet rs, PreparedStatement pstmt, Connection conn)
   {
      if(rs != null)
         try {
            rs.close();
         }catch(SQLException ex) {
         }
      
      if (pstmt != null)
         try {
            pstmt.close();
         } catch (SQLException ex) {
         }
      
      if (conn != null)
         try {
            pstmt.close();
         } catch (SQLException ex) {
         }
   }

   public ArrayList<BoardDataBean> getArticles(int start, int end) throws Exception
   {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      ArrayList<BoardDataBean> articleList = null;
      String sql = null;
      
      try
      {
         conn = getConnection();
         
         sql = "select * from" +
               "(select rownum rnum, num, writer, passwd, " +
               "subject, email, content, reg_date, "+
               "readcount, ref, re_step, re_level from "+
               "(select * from board order by ref desc, re_step asc))" +
               "where rnum>=? and rnum<=?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, start);
         pstmt.setInt(2, end);
         rs=pstmt.executeQuery();
         
         if(rs.next())
         {
            articleList = new ArrayList<BoardDataBean>();
            do
            {
               BoardDataBean article = new BoardDataBean();
               article.setNum(rs.getInt("num"));
               article.setWriter(rs.getString("writer"));
               article.setPasswd(rs.getString("passwd"));
               article.setSubject(rs.getString("subject"));
               article.setEmail(rs.getString("email"));
               article.setContent(rs.getString("content"));
               article.setReg_date(rs.getTimestamp("reg_date"));
               article.setReadcount(rs.getInt("readcount"));
               article.setRef(rs.getInt("ref"));
               article.setRe_step(rs.getInt("re_step"));
               article.setRe_level(rs.getInt("re_level "));
               
               articleList.add(article);
            }while(rs.next());
         }
      }
      catch(Exception ex)
      {
         ex.printStackTrace();
      }
      finally
      {
         close(rs, pstmt, conn);
      }
      
      return articleList;
   }

	public int getArticleCount() throws Exception{
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;
		
		try {
			conn = getConnection();
			
			pstmt = conn.prepareStatement("select count(*) from board");
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				count = rs.getInt(1);
			}
		}catch (Exception ex) {
			ex.printStackTrace();
			// TODO: handle exception
		}finally {
			close(rs,pstmt,conn);
		}
		return count;
	}	

	public void insertArticle(BoardDataBean article) throws Exception{
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		int num = article.getNum();
		int ref = article.getRef();
		int re_step = article.getRe_step();
		int re_level = article.getRe_level();
		int number = 0;
		String sql = "";
		
		try {
			conn = getConnection();
			
			pstmt = conn.prepareStatement("select max(num) from board");
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				number = rs.getInt(1) + 1;
			}else {
				number = 1;
			}
			
			if(num !=0) {
				sql = "update board set re_step = re_step + 1 where" +
					  "ref = > and re_step > ? ";
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, ref);
				pstmt.setInt(2, re_step);
				pstmt.executeQuery();
				re_step = re_step + 1;
				re_level = re_level + 1;
				
			}else {
				ref = number;
				re_step = 0;
				re_level = 0;
			}
			
			sql = "insert into board(num, writer, passwd, subject," +
				  "email, content, reg_date, readcount,";
			sql += "ref, re_step, re_level) values" +
				  "(board_seq.nextval, ?,?,?,?,?,?,?,?,?,?)";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, article.getWriter());
			pstmt.setString(2, article.getPasswd());
			pstmt.setString(3, article.getSubject());
			pstmt.setString(4, article.getEmail());
			pstmt.setString(5, article.getContent());
			pstmt.setTimestamp(6, article.getReg_date());
			pstmt.setInt(7, article.getReadcount());
			pstmt.setInt(8, ref);
			pstmt.setInt(9, re_step);
			pstmt.setInt(10, re_level);
	
		}catch (Exception ex) {
			System.out.println("글쓰기 오류 : "+ ex.getMessage());
			ex.printStackTrace();
		}finally {
			close(rs,pstmt,conn);
		}
	}

}