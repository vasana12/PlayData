package stringOperatroEx;
import static java.lang.System.out;
import static java.lang.System.in;
import java.util.*;

public class Main {

	static int cnt = 1 ;
	
	public static void main(String[] args) {
		int num1 = 0 , num2 = 0, checkop = 0;
		float tot=0.f;
		StringTokenizer op;
		String oper;
		System.out.println((int)'+');		
		System.out.println((int)'-');	
		System.out.println((int)'*');	
		System.out.println((int)'/');	
		//'+' '-' '*' '/'
		Scanner sc = new Scanner(in);
		
		System.out.println("수식 입력 =>");
		oper = sc.nextLine();
		op = new StringTokenizer(oper,"+-/*",true);
		
		if(check(op)) {
			op = new StringTokenizer(oper,"+-/*",true);
			for(int i = 1; i < cnt ; i ++) {
				if(i == 1) {
					num1 = Integer.parseInt(op.nextToken());
				}else if (i == 2){
		
				}else if(i % 2 == 1) {
					num2 = Integer.parseInt(op.nextToken());
					switch (op.nextToken()) {
					case "+":  //checkop = 1
						tot = num1 + num2;
						break;
					case "-" : //checkop =2
						tot = num1 - num2;
						break;
					case "*":  //checkop= 3
						tot = num1 * num2;
						break;
					case "/":  //checkop= 4
						tot = (float)(num1) / num2;
						break;
				}
				else if(i != 2 && (i % 2 == 0)){
					switch (op.nextToken()) {
					case "+":  //checkop 1
						break;
					case "-" : //checkop 2
						break;
					case "*":  //checkop 3
						break;
					case "/":  //checkop 4
						break;
					}
				}
			}
		}
		
	}
	static boolean check(StringTokenizer op) {
		while(op.hasMoreTokens()) {
			String str = op.nextToken();
			int checknum = 0;
			
			if(cnt % 2 == 1) {
				try {
					System.out.println("숫자 변환 " + cnt);
					checknum = Integer.parseInt(str);
					cnt++;
				}catch(java.lang.NumberFormatException e){
					System.out.println("숫자 변환 실패 " + cnt);
					cnt = 1;
					return false;
				}
				System.out.println("숫자 변환 성공 " + cnt);
			}else {
				if((str != "+"&& str !="-"&& str !="*"&& str != "/")){
					System.out.println("잘못된 연산자" + str);
					cnt = 1;
					return false;
				}else {
					cnt++;
				}
			}
		}
		System.out.println("정삭 적인 수식");
		return true;
	}

}
