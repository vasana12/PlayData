/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.31
 * Generated at: 2018-06-28 06:36:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.BoardDBBean;
import board.BoardDataBean;
import java.util.List;
import java.util.*;
import java.text.SimpleDateFormat;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/color.jsp", Long.valueOf(1530074337327L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("board.BoardDataBean");
    _jspx_imports_classes.add("board.BoardDBBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String bodyback_c = "#e0ffff";
	String back_c = "#8fbc8f";
	String title_c = "#5f9ea0";
	String value_c = "#b0e0e6";
	String bar = "#778899";

      out.write("\r\n");
      out.write("\r\n");

   int pageSize = 10;
   SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-d HH:mm");
   
   String pageNum = request.getParameter("pageNum"); //페이지 접속시 보여줄 페이지 계산
   
   if(pageNum == null) //위 request에서 pageNum값이 null일때는 맨처음 페이지에 접속 시 페이지 정보가 없기 때문에 
      pageNum = "1";
   
   int currentPage = Integer.parseInt(pageNum);
   int startRow = (currentPage - 1) * pageSize + 1; //보여줄 글의 시작 번호
   int endRow = startRow + pageSize - 1;			//보여줄 글의 마지막 번호
   int count = 0; //글의 총 개수
   int number = 0;
   
   ArrayList<BoardDataBean> articleList = null;
   BoardDBBean dbPro = BoardDBBean.getInstance();
   count = dbPro.getArticleCount();
   
   //맨 마지막 페이지의 마지막 글을 삭제하여 마지막 페이지가 없어졌을 때 필요
   //글이 10씩 저장되는 페이지가 4개 있고 글은 총 31개가 있다
   //마지막 페이지에는 하나의 글만 존재한다.
   //이 때 마지막 글을 보고 다시 뒤로 가면
   //4페이로 이동하는게 좋다
   //하지만 이 상황에서 글을 삭제하면 4페이지로 이동하는게 아니라 3페이지로 이동하는게 맞다.
   //따라서 count 총 글개수가 startRow보다 작아지는 순간 (위에서 말한 상황)
   //해당 if문이 실행된다. 총개수 : 30 < 시작수 :31
   if(count < startRow)
   {
      currentPage = currentPage - 1;
      startRow = (currentPage - 1) * pageSize + 1;
      endRow = startRow + pageSize - 1;
   }
   //1페이지에 글이 하나밖에 없을때 삭제하면
   if(count > 0)
      articleList = dbPro.getArticles(startRow, endRow);
   
   number = count - (currentPage - 1) * pageSize; //페이지 번호에 해당한다. DB데이터가 아니다.

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>게시판</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body bgcolor=\"");
      out.print(bodyback_c);
      out.write("\">\r\n");
      out.write("   <center>\r\n");
      out.write("      <b>글목록</b>\r\n");
      out.write("      <table width=\"600\">\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td align=\"right\" bgcolor=\"");
      out.print(value_c);
      out.write("\"><a\r\n");
      out.write("               href=\"writeForm.jsp\">글쓰기</a></td>\r\n");
      out.write("         </tr>\r\n");
      out.write("      </table>\r\n");

   if(count == 0)
   {

      out.write("\r\n");
      out.write("      <table width=\"600\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td align=\"center\">게시판에 저장된 글이 없습니다.</td>\r\n");
      out.write("         </tr>\r\n");
      out.write("      </table>\r\n");

   }
   else
   {

      out.write("\r\n");
      out.write("      <table width=\"600\" border=\"1\" cellpadding=\"0\" cellpacing=\"0\" align=\"center\">\r\n");
      out.write("         <tr height=\"30\" bgcolor=\"");
      out.print(value_c);
      out.write("\">\r\n");
      out.write("            <td align=\"center\" width=\"50\"> 번 호 </td>\r\n");
      out.write("            <td align=\"center\" width=\"250\"> 제 목 </td>\r\n");
      out.write("            <td align=\"center\" width=\"100\"> 작성자 </td>\r\n");
      out.write("            <td align=\"center\" width=\"150\"> 작성일 </td>\r\n");
      out.write("            <td align=\"center\" width=\"50\"> 조 회 </td>\r\n");
      out.write("      </tr>\r\n");

      for(int i=0; i<articleList.size(); i++)
      {
         BoardDataBean article = (BoardDataBean)articleList.get(i);

      out.write("\r\n");
      out.write("         <tr height=\"30\">\r\n");
      out.write("            <td align=\"center\" width=\"50\">");
      out.print(number);
      out.write("</td>\r\n");
      out.write("            <td width=\"250\">\r\n");

               if(article.getRe_level() > 0)
               {
                  for(int level = 0; level < article.getRe_level(); level++)
                  {

      out.write("\r\n");
      out.write("                     &nbsp;\r\n");

                  }

      out.write("\r\n");
      out.write("                  <img src=\"image/re.gif\">\r\n");

               }
               else
               {

      out.write("\r\n");
      out.write("                  &nbsp;\r\n");

               }

      out.write("\r\n");
      out.write("               <a href=\"content.jsp?num=");
      out.print(article.getNum());
      out.write("&pageNum=");
      out.print(currentPage);
      out.write("&number=");
      out.print(number);
      out.write('"');
      out.write('>');
      out.print(article.getSubject());
      out.write("</a>\r\n");

               if(article.getReadcount() >= 20)
               {

      out.write("\r\n");
      out.write("                  <img src=\"images/hot.gif\"border=\"0\" height=\"16\">\r\n");
   
               }

      out.write("\r\n");
      out.write("               </td>\r\n");
      out.write("               <td align=\"center\" width=\"100\"><a href=\"mailto:");
      out.print(article.getEmail());
      out.write('"');
      out.write('>');
      out.print(article.getWriter());
      out.write("</a>\r\n");
      out.write("               </td>\r\n");
      out.write("               \r\n");
      out.write("               <td align=\"center\" width=\"50\">");
      out.print(article.getReadcount());
      out.write("</td>\r\n");
      out.write("         </tr>\r\n");

         number--;
      }

      out.write("\r\n");
      out.write("      </table>\r\n");
      out.write("      <br>\r\n");

      }
   
      if(count > 0)
      {
         int pageCount = ((count-1) / pageSize)+1;
         int startPage = 1;
         int i;
         
         if(currentPage%10 != 0)
            startPage = (int)(currentPage/10)*10+1;
         else
            startPage = currentPage - 9;
         
         int pageBlock = 10;
         
         if(startPage > 10)
         {

      out.write("\r\n");
      out.write("            <a href=\"List.jsp?pageNum=");
      out.print(startPage-10);
      out.write("\">[이전]</a>\r\n");

         }
         
         for(i=startPage; (i<=startPage+9) && (i<=pageCount) ; i++)
         {

      out.write("\r\n");
      out.write("            <a href=\"List.jsp?pageNum=");
      out.print(i);
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i);
      out.write("]</a>\r\n");

         }
         
         if(i < pageCount) 
         {

      out.write("\r\n");
      out.write("            <a href=\"List.jsp?pageNum=");
      out.print(startPage+10);
      out.write("\">[다음]</a>\r\n");

         }
      }

      out.write("\r\n");
      out.write("   </center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
