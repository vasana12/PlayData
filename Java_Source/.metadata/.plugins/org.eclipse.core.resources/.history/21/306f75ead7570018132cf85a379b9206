package guitarMain;

import java.util.LinkedList;

public class CalculateScaleClass {
	int num;
	int root;
	int scale[];
	String rootName;
	
	int majorPentaScale[];
	int minorPentaScale[];
	LinkedList <Integer> majSearch = new LinkedList <Integer>();
	LinkedList <Integer> minSearch = new LinkedList <Integer>();
	
	CalculateScaleClass (){
		this.root = 0;
		this.num = 0;
		this.scale = new int[8];
		this.majorPentaScale = new int [4];
		this.minorPentaScale = new int [4];
		this.rootName = null;
	}
	//Choose the root Number
	public void sixStringRootNumM(String rootName) {

		switch(rootName) {
		case "Fb":
		case "E":
			this.root = 0;
			break;
			
		case "Es":
		case "F":
			this.root = 1;
			break;
			
		case "Fs":
		case "Gb":
			this.root = 2;
			break;
			
		case "G":
			this.root = 3;
			break;
			
		case "Gs":
		case "Ab":
			this.root = 4;
			break;
			
		case "A":
			this.root = 5;
			break;
			
		case "As":
		case "Bb":
			this.root = 6;
			break;
			
		case "B":
			this.root = 7;
			break;
			
		case "Bs":
		case "Cb":
			this.root = 8;
			break;
			
		case "C":
			this.root = 9;
			break;
			
		case "Cs":
		case "Db":
			this.root = 10;
			break;
			
		case "D":
			this.root = 11;
			break;
		}
	}
	
	//Calculate the Elements to the majorScalse 
	public void majorScaleM() {
		this.num = this.root;
		this.scale[0] = this.root;
		
		for(int i = 0; i <= 7; i ++) {
		
		}

	}
	//Calculate the Elements to the minorScalse 
	public void minorScaleM() {
		this.num = this.root;
		this.scale[0] = root;
		
		for(int i =0; i <= 7; i ++) {
			this.num = this.num + 2;
			this.scale[i+1] = this.num;
		}
		this.scale[2] = this.scale[2] - 1;
		this.scale[5] = this.scale[5] - 1;
	}	
	//Calculate the Elements to the Pentatonic
	public void minorPentatonic() {
		this.minorPentaScale[0] = this.scale[0];
		this.minorPentaScale[1] = this.scale[1];
		this.minorPentaScale[2] = this.scale[2];
		this.minorPentaScale[3] = this.scale[4];
		this.minorPentaScale[4] = this.scale[5];
	}
	public void majorPentatonic() {
		this.majorPentaScale[0] = this.scale[0];
		this.majorPentaScale[1] = this.scale[2]-1;
		this.majorPentaScale[2] = this.scale[3];
		this.majorPentaScale[3] = this.scale[4];
		this.majorPentaScale[4] = this.scale[6]-1;
	}
	
	public void majorScaleSearch() {
		this.root = this.scale[0];
		this.num = this.root;
		int twoCount = 0;
		int threeCount = 0;
		//아래로 찾기
		for(int i = 0; this.num > 0; i++) 
		{
			if(twoCount ==2 && threeCount == 3) {
				twoCount = 0;
				threeCount = 0;
			}
			if((twoCount == 0 && threeCount == 0)||
			   (twoCount == 2 && threeCount == 0)) 
			{	
				if(twoCount == 0 ) {
					twoCount++;
				}else if(threeCount ==0) {
					threeCount++;
				}
				if(this.num > 0) {
					majSearch.addFirst(this.num - 1);
				}else {
					break;
				}
				
			}else if(twoCount < 2) {
				if(this.num > 0) {
					majSearch.addFirst(this.num - 2);
				}else {
					break;
				}
				twoCount++;
				
			}else if(threeCount < 3){
				if(this.num > 0) {
					majSearch.addFirst(this.num - 2);
				}else {
					break;
				}
				threeCount++;
			}
		}
		
		for(int i = 0; this.num < 49; i++) 
		{
			if(twoCount ==2 && threeCount == 3) {
				twoCount = 0;
				threeCount = 0;
			}
			if((twoCount == 2 && threeCount == 0)||
			   (twoCount == 2 && threeCount == 3)) 
			{	
				if(twoCount == 0 ) {
					twoCount++;
				}else if(threeCount ==0) {
					threeCount++;
				}
				if(this.num < 49) {
					majSearch.addFirst(this.num + 1);
				}else {
					break;
				}
				
			}else if(twoCount < 2) {
				if(this.num < 49) 
					majSearch.addFirst(this.num + 2);
				else
					break;
				
				twoCount++;
				
			}else if(threeCount < 3){
				if(this.num > 0) 
					majSearch.addFirst(this.num - 2);
				else 
					break;
				
				threeCount++;
			}
		}
	}
	
	public void minorScaleSearch() {
		this.root = this.scale[0];
		this.num = this.root;
		int twoCount = 0;
		int threeCount = 0;
		//아래로 찾기
		for(int i = 0; this.num > 0; i++) 
		{
			if(twoCount ==2 && threeCount == 5) {
				twoCount = 0;
				threeCount = 0;
			} 
			if((twoCount == 2 && threeCount == 0)||
			   (twoCount == 2 && threeCount == 2)||
			   (twoCount == 2 && threeCount == 5)) 
			{	
				if(threeCount < 5) {
					threeCount++;
				}
				if(this.num > 0) {
					majSearch.addFirst(this.num - 1);
				}else {
					break;
				}
				
			}else if(twoCount < 2) {
				if(this.num > 0) {
					majSearch.addFirst(this.num - 2);
				}else {
					break;
				}
				twoCount++;
				
			}else if(threeCount < 5){
				if(this.num > 0) {
					majSearch.addFirst(this.num - 2);
				}else {
					break;
				}
				threeCount++;
			}
	}
		for(int i = 0; this.num < 49; i++) 
		{
			if( twoCount ==1 && threeCount == 0){
				twoCount = 0;
				threeCount = 0;
			}
			if((twoCount == 2 && threeCount == 0)||
			   (twoCount == 2 && threeCount == 3)) 
			{	
				if(twoCount == 0 ) {
					twoCount++;
				}else if(threeCount ==0) {
					threeCount++;
				}
				if(this.num < 49) {
					majSearch.addFirst(this.num + 1);
				}else {
					break;
				}
				
			}else if(twoCount < 2) {
				if(this.num < 49) 
					majSearch.addFirst(this.num + 2);
				else
					break;
				
				twoCount++;
				
			}else if(threeCount < 3){
				if(this.num > 0) 
					majSearch.addFirst(this.num - 2);
				else 
					break;
				
				threeCount++;
			}
		}
	}
}






